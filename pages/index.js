import Head from 'next/head';
import Link from 'next/link';
import { useEffect, useState, useCallback } from 'react';

import { useRequestManager } from '../hooks/useResponseChecker';
import {
  FullBlockLoader,
  Button,
  ModalWindow,
  ModalWindowBodyAddCoin,
  FullBlockMessage,
  Header,
} from '../components';

export default function Home() {
  const { data, onCheckResponse } = useRequestManager();
  const [userCoinsIsLoading, setUserCoinsIsLoading] = useState(false);
  const [addCoinIsOpenModalWindow, setAddCoinIsOpenModalWindow] =
    useState(false);

  const getAccessibleCoins = useCallback(() => {
    setUserCoinsIsLoading(true);

    fetch('/api/accessible-coins')
      .then((response) => response.json())
      .then((response) => onCheckResponse(response))
      .catch(() => {
        // TODO: need to implement
      })
      .finally(() => {
        setUserCoinsIsLoading(false);
      });
  }, [onCheckResponse]);

  useEffect(() => {
    getAccessibleCoins();
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className='flex flex-col max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 min-h-screen'>
        <Header>
          <Button
            intent='primary'
            onClick={() => setAddCoinIsOpenModalWindow(true)}
          >
            Add new coin
          </Button>
        </Header>

        {userCoinsIsLoading ? <FullBlockLoader /> : null}

        {!userCoinsIsLoading && data?.coins.length === 0 ? (
          <FullBlockMessage text='No data found' />
        ) : null}

        {!userCoinsIsLoading && data?.coins?.length !== 0 ? (
          <div className='grid grid-cols-2 lg:grid-cols-6 gap-4'>
            {data?.coins.map((userCoin) => {
              return (
                <div
                  key={userCoin.coin}
                  className='py-4 px-4 text-center bg-white rounded-md duration-300 hover:shadow-md shadow-sm border relative'
                >
                  <p className='text-xl font-extrabold'>{userCoin.coin}</p>
                  <p className='text-xs text-slate-400 mb-4'>
                    {userCoin.fullCoinName}
                  </p>
                  <span className='flex h-3 w-3 absolute right-4 top-4'>
                    <span className='animate-ping absolute inline-flex h-full w-full rounded-full bg-green-400 opacity-75'></span>
                    <span className='relative inline-flex rounded-full h-3 w-3 bg-green-500'></span>
                  </span>
                  <Link href={`/${userCoin.id}`}>
                    <a className='text-xs border-2 hover:border-blue-600 hover:text-blue-600 border-blue-500 text-blue-500 font-bold px-2 py-2 inline-block rounded-md'>
                      Trade
                    </a>
                  </Link>
                </div>
              );
            })}
          </div>
        ) : null}
      </main>
      <ModalWindow isOpen={addCoinIsOpenModalWindow} msgTitle='Add new coin'>
        <ModalWindowBodyAddCoin
          msgBtnApply='Add coin'
          msgBtnClose='Close'
          onApply={() => getAccessibleCoins()}
          onClose={() => setAddCoinIsOpenModalWindow(false)}
        />
      </ModalWindow>
    </>
  );
}
