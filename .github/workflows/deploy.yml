name: CI

# 1
# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the master branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true
#2
env:
  REGISTRY: "registry.digitalocean.com/infocoin"
  IMAGE_INFOCOIN_APP: "infocoin-app"
  IMAGE_INFOCOIN_CRON: "infocoin-cron"
  APP_TELEGRAM_CHAR_ID: ${{ secrets.APP_TELEGRAM_CHAR_ID }}
  APP_TELEGRAM_BOT_TOKEN: ${{ secrets.APP_TELEGRAM_BOT_TOKEN }}
  APP_BINANCE_API_KEY: ${{ secrets.APP_BINANCE_API_KEY }}
  APP_BINANCE_API_SECRET: ${{ secrets.APP_BINANCE_API_SECRET }}
  APP_LOCALHOST_URL: ${{ secrets.APP_LOCALHOST_URL }}
  APP_DB_URL: ${{ secrets.APP_DB_URL }}
  APP_JWT_SALT: ${{ secrets.APP_JWT_SALT }}
  APP_JWT_TTL: ${{ secrets.APP_JWT_TTL }}

#3
jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo 
        uses: actions/checkout@v2
        
      # - name: Build container image
      #   run: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

      - name: Build image infocoin-app
        run: docker build . --file Dockerfile.app --tag $(echo $IMAGE_INFOCOIN_APP) --label "runnumber=${GITHUB_RUN_ID}"

      - name: Build image infocoin-cron
        run: docker build . --file Dockerfile.cron --tag $(echo $IMAGE_INFOCOIN_CRON) --label "runnumber=${GITHUB_RUN_ID}"

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600
      
      - name: Remove all old app images
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_INFOCOIN_APP)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_INFOCOIN_APP) $(doctl registry repository list-tags $(echo $IMAGE_INFOCOIN_APP) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Remove all old cron images
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_INFOCOIN_CRON)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_INFOCOIN_CRON) $(doctl registry repository list-tags $(echo $IMAGE_INFOCOIN_CRON) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Push image app to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_INFOCOIN_APP)

      - name: Push image cron to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_INFOCOIN_CRON)
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    
    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          # key: ${{ secrets.SSHKEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          envs: IMAGE_INFOCOIN_APP,IMAGE_INFOCOIN_CRON,REGISTRY,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }},GITHUB_SHA
          script: |
            # Login to registry
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
            # Stop running container
            docker stop $(echo $IMAGE_INFOCOIN_APP)
            docker stop $(echo $IMAGE_INFOCOIN_CRON)
            # Remove old container
            docker rm $(echo $IMAGE_INFOCOIN_APP)
            docker rm $(echo $IMAGE_INFOCOIN_CRON)
            # Run a new container from a new image
            docker run -d \
            --env APP_TELEGRAM_CHAR_ID=$(echo $APP_TELEGRAM_CHAR_ID) \
            --env APP_TELEGRAM_BOT_TOKEN=$(echo $APP_TELEGRAM_BOT_TOKEN) \
            --env APP_BINANCE_API_KEY=$(echo $APP_BINANCE_API_KEY) \
            --env APP_BINANCE_API_SECRET=$(echo $APP_BINANCE_API_SECRET) \
            --env APP_LOCALHOST_URL=$(echo $APP_LOCALHOST_URL) \
            --env APP_DB_URL=$(echo $APP_DB_URL) \
            --env APP_JWT_SALT=$(echo $APP_JWT_SALT) \
            --env APP_JWT_TTL=$(echo $APP_JWT_TTL) \
            --restart always \
            --name $(echo $IMAGE_INFOCOIN_APP) \
            $(echo $IMAGE_INFOCOIN_APP)
            # Run a new container from a new image
            docker run -d \
            --restart always \
            --name $(echo $IMAGE_INFOCOIN_CRON) \
            $(echo $IMAGE_INFOCOIN_CRON)